
template<typename A, typename B> istream& operator>>(istream &is, pair<A, B> &p) { return is >> p.first >> p.second;} template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> istream& operator>>(istream &is, T_container &v) { for (T& x : v) is >> x; return is;} bool debug;
template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return debug ? os << '<'<<p.first<<"," <<p.second<<">" : os << p.first << " " << p.second;} template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { if(debug) { os << "["; string sep; for (const T &x : v) os << sep << x, sep = ", "; os << "]\n"; } else { bool f = false; for (const T &x : v) { if(f) {os << " ";} os << x, f = true; } } return os;}
template <typename T, typename T1, typename... Tail> T amin(T& a, T1 b, Tail... c) { if(b < a) a = b; if constexpr (sizeof...(c) != 0) { amin(a, c...); } return a; } template <typename T, typename T1, typename... Tail> T amax(T& a, T1 b, Tail... c) { if(b > a) a = b; if constexpr (sizeof...(c) != 0) { amax(a, c...); } return a; }
void dbg_out() { cout << endl; } template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cout << ' ' << H; dbg_out(T...); }
 
#ifdef ONLINE_JUDGE
#define dbg(...)
#else
#define dbg(...) cout << "[" << #__VA_ARGS__ << "]:\n", debug = true, dbg_out(__VA_ARGS__), debug = false
#endif

int testcase;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& matrix, vector<int>& initial) {
            
        int n = matrix.size();
        
        vector<int> color(n,-1);
        vector<int> size(n,0);

        int component=0;
        function<void(int)> dfs= [&](int node)->void{
            if(color[node] != -1) return;
            color[node] = component;
            for(int ngh=0;ngh<n;ngh++){
                if( matrix[node][ngh] == 1 && color[ngh] == -1)
                    dfs(ngh);
            }
        };

        for(int i=0;i<n;i++){
            if( color[i] == -1 ){
                dfs(i);
                component++;
            }
        }
        
        for(int c:color){
            size[c]++;
        }
        
        // counting freq of infected nodes
        map<int, int> freq;
        for(int infected:initial){
            freq[color[infected]]++;
        }
    
        int ans = INT_MAX;
        for(int infected:initial){
            if( freq[ color[infected] ] == 1 ){
                if(ans == INT_MAX)
                    ans = infected;
                else if( size[ color[infected] ] > size[color[ans]])
                    ans = infected;
                else if( size[ color[ans] ] == size[color[infected]])
                    ans = min(ans,infected);
            }
        }

        if(ans == INT_MAX){
            for(int infected:initial){
                ans = min(ans,infected);
            }
        }

        // cout<<ans<<endl;
        return ans;
    }
};